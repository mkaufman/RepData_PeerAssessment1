guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emissions (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & Los Angeles from 1999-2008"))
print(plot6)
vehicleBaltimoreNEI <- subset(vehicleNEI, fips=="24510")
vehicleBaltimoreNEI$City <- "Baltimore City"
vehicleLANEI <- subset(vehicleNEI, fips=="06037")
vehicleLANEI$City <- "Los Angeles City"
combinedNEI <- rbind(vehicleBaltimoreNEI, vehicleLANEI)
library(ggplot2)
plot6 <- ggplot(CombinedNEI,aes(x=factor(year),y=Emissions,fill=City)) +
geom_bar(stat="identity",aes(fill=year)) +
facet_grid(scales="free", space="free", .~City) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emissions (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & Los Angeles from 1999-2008"))
print(plot6)
vehicle <- grepl("vehicle", SCC$SCC.Level.Two, ignore.case=TRUE)
vehicleSCC <- SCC[vehicle, ]$SCC
vehicleNEI <- NEI[NEI$SCC %in% vehicleSCC,]
vehicleBaltimoreNEI <- subset(vehicleNEI, fips=="24510")
vehicleBaltimoreNEI$City <- "Baltimore City"
vehicleLANEI <- subset(vehicleNEI, fips=="06037")
vehicleLANEI$City <- "Los Angeles City"
combinedNEI <- rbind(vehicleBaltimoreNEI, vehicleLANEI)
library(ggplot2)
plot6 <- ggplot(CombinedNEI,aes(x=factor(year),y=Emissions,fill=City)) +
geom_bar(stat="identity",aes(fill=year)) +
facet_grid(scales="free", space="free", .~City) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emissions (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & Los Angeles from 1999-2008"))
print(plot6)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
vehicle <- grepl("vehicle", SCC$SCC.Level.Two, ignore.case=TRUE)
vehicleSCC <- SCC[vehicle, ]$SCC
vehicleNEI <- NEI[NEI$SCC %in% vehicleSCC,]
vehicleBaltimoreNEI <- subset(vehicleNEI, fips=="24510")
vehicleBaltimoreNEI$City <- "Baltimore City"
vehicleLANEI <- subset(vehicleNEI, fips=="06037")
vehicleLANEI$City <- "Los Angeles City"
combinedNEI <- rbind(vehicleBaltimoreNEI, vehicleLANEI)
library(ggplot2)
plot6 <- ggplot(combinedNEI,aes(x=factor(year),y=Emissions,fill=City)) +
geom_bar(stat="identity",aes(fill=year)) +
facet_grid(scales="free", space="free", .~City) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emissions (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & Los Angeles from 1999-2008"))
print(plot6)
vehiclesData <- grepl("vehicle", SCC$SCC.Level.Two, ignore.case=TRUE)
vehiclesDataSCC <- SCC[vehiclesData,]$SCC
vehiclesDataNEI <- NEI[NEI$SCC %in% vehiclesDataSCC,]
# Subset the vehicles NEI data to Baltimore's fip
baltimoreVehiclesDataNEI <- vehiclesDataNEI[vehiclesDataNEI$fips=="24510",]
baltimoreVehiclesDataNEI$city <- "Baltimore City"
# Subset the vehicles NEI data to Los Angeles' fip
LAVehiclesDataNEI <- vehiclesDataNEI[vehiclesDataNEI$fips=="06037",]
LAVehiclesDataNEI$city <- "Los Angeles County"
# Combine to one DF
combinedNEI <- rbind(baltimoreVehiclesDataNEI,LAVehiclesDataNEI)
library(ggplot2)
ggp <- ggplot(combinedNEI, aes(x=factor(year), y=Emissions, fill=city)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(scales="free", space="free", .~city) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total P[2.5] Emission in Kilo-Tons")) +
labs(title=expression("PM[2.5] Motor Vehicle Source Emissions in Baltimore and LA, 1999 to 2008"))
print(ggp)
#extract the data in Baltimore City, Maryland (fips == "24510") and
#in Los Angeles County, California (fips == "06037")
NEI <- NEI[(NEI$fips == "24510" | NEI$fips == "06037"), ]
#merge these 2 dataset by SCC
NEI_SCC <- merge(NEI, SCC, by.x="SCC", by.y="SCC", all=FALSE)
#for the  emissions from motor vehicle sources, we use the "mobile - on-road"
#in EI.Sector as the indicator.
#extract data with "mobile - on-road" in EI.Sector and
ext_data <- NEI_SCC[grepl("mobile - on-road", NEI_SCC$EI.Sector, ignore.case = TRUE),
c("fips", "SCC", "Emissions", "year", "EI.Sector")]
#rename EI.Sector
names(ext_data)[5] <- "Motor.Vehicle"
#replace the fips numbers with county names
ext_data$fips <- gsub("24510", "Baltimore", ext_data$fips)
ext_data$fips <- gsub("06037", "Los Angeles", ext_data$fips)
#group the data by year and motor vehicle sources and summarize by the sum of
#PM2.5 value
pm_year <- group_by(ext_data, Motor.Vehicle, year, fips)
ttlpm_yr <- summarize(pm_year, emissions = sum(Emissions))
#plot
p <- ggplot(data = ttlpm_yr, aes(x = year, y = emissions, group = Motor.Vehicle,
color = Motor.Vehicle)) +
geom_line() +
geom_point(fill = "white") +
facet_grid(. ~ fips) +
xlab("Year") +
ylab("PM2.5 Emission") +
ggtitle("Motor Vehicle related emissions in Baltimore and LA")
print(p)
#PM2.5 Emissions Data, for reproduction purpose
NEI <- readRDS("summarySCC_PM25.rds")
#subsetting to fips == "24510" | fips == "06037"
NEIsubset2 <- NEI[((NEI$fips == "24510") | (NEI$fips == "06037")), ]
#in Source Classification Code, looking for "vehicle sources" i.e veh, then subsetting & merging with NEIsubset for Baltimore
SCC <- readRDS("Source_Classification_Code.rds")
SCC$veh <- grepl("^(.*)veh(.*)$", SCC$EI.Sector, ignore.case=TRUE)
SCC_veh_Subset <- SCC[SCC$veh==TRUE, ]
MergedData3 <- merge(NEIsubset2, SCC_veh_Subset, all=FALSE)
#aggregating total emission (sum) per year in Baltimore City & Los Angeles
NEIsubsetaggr3 <-aggregate(MergedData3$Emissions ~ MergedData3$year+MergedData3$fips, FUN="sum", na.rm=TRUE)
names(NEIsubsetaggr3) = c("Year", "City","Vehacles_Emission")
#ploting total emission from vehicles per year in Baltimore City 24510 Vs. Los Angeles 06037, directly to png file
library(ggplot2)
q <- qplot(Year, Vehacles_Emission, data=NEIsubsetaggr3, geom=c("point","line"), color=City)
q + scale_x_continuous(breaks=c(1999, 2002, 2005, 2008))
install.packages("RColorBrewer")
library(RColorBrewer)
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x,y)
plot(x,y)
smoothScatter(x,y)
smoothScatter(x,y, col=rgb(0,0,0,0.2), pch=19)
plot(x,y,col=rgb(0,0,0,0.2), pch=19)
install.packages("grDevices")
pal <- colorRampPalette(c("red", "yellow"))
pal(2)
pal(3)
pal(10)
display.brewer.all()
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
pal
pal(1)
image(volcano, col = pal(20))
volcano
head(volcano)
summary(volcano)
set.seed(2)x <- rnorm(2000)y <- rnorm(2000)plot(x, y, pch = 19)
x <- rnorm(2000)y <- rnorm(2000)plot(x, y, pch = 19)
> set.seed(2)> x <- rnorm(2000)> y <- rnorm(2000)> plot(x, y, pch = 19)
set.seed(2)
x <- rnorm(2000)
y <- rnorm(2000)
plot(x, y, pch = 19)
plot(x, y, pch = 19, col = rgb(0, 0, 0, 0.15))
library(swirl)
swirl()
library(swirl)
swirl()
sample(colors(),10)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue","green",0.5)
)
p3 <- colorRampPalette(c("blue","green"),alpha=0.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols <- brewer.pal(3,"BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pals(20))
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd$v[,1]
svd1$v[,1]
svd1$d
head(constantMatrix)
d
ssvd()
svd2
svd2$d
scd2[,c(1,2)]
svd2[,c(1,2)]
sv2
svd2
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] * svd1$d[,1]) %*% svd1$v[,1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% svd1$v[,1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
library("kernlab")
install.packages("kernlab")
?data
library(kernlab)
data(spam)
str(spam[1, 1:5]
)
str(spam[, 1:5])
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
names(trainSpam)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
plot(log10(trainSpam[, 1:4] + 1))
hCluster - hclust(dist(t(trainSpam[, 1:57])))
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
predictionModel = glm(numType ~ charDollar, famil = "binomial", data = trainSpam)
preditionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nospam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] = "spam"
table(predictedSpam, testSpam$type)
(61 + 458)/(1346 + 458 + 61 + 449)
sessionInfo()
?read.csv
read.csv(activity.csv, header=TRUE)
getwd
getwd()
setwd("/Users/markkaufman/coursera/reproducible_research/RepData_PeerAssessment1")
getwd()
read.csv(activity.csv, header=TRUE)
getwd()
read.csv("activity.csv", header=TRUE)
activityDF <- read.csv("activity.csv", header=TRUE)
head(activityDF)
summary(activityDF)
str(activityDF)
?as.Date
activityDF$date <- as.Date(activityDF$date, format = "%Y-%m-%d")
str(activityDF)
library(dplyr)
summarize(activityDF$date, steps = sum(steps, na.rm = TRUE))
days <- group_by(activityDF, date)
summary(days)
summary(days)
str(days)
str(activityDF)
summarize(days, steps = sum(steps, na.rm = TRUE))
summarize(group_by(activityDF, date), steps = sum(steps, na.rm = TRUE))
days_total_steps <- summarize(group_by(activityDF, date), steps = sum(steps, na.rm = TRUE))
hist(days_total_steps)
hist(days_total_steps$steps)
hist(days_total_steps$steps,
main="Histogram for Total Steps in Day",
xlab="Steps",
border="blue",
col="green",
las=1,
breaks=5)
hist(days_total_steps$steps,
main="Histogram for Total Steps in Day",
xlab="Steps",
border="blue",
col="green",
las=1,
breaks=10)
hist(days_total_steps$steps,
main="Histogram for Total Steps in Day",
xlab="Steps",
border="blue",
col="green",
las=1,
breaks=7)
hist(days_total_steps$steps,
main="Histogram for Total Steps in Day",
xlab="Steps",
border="blue",
col="green",
las=1,
breaks=8)
hist(days_total_steps$steps,
main="Histogram for Total Steps in Day",
xlab="Steps",
border="blue",
col="green",
ylim=c(0,30)
las=1,
breaks=5)
hist(days_total_steps$steps,
main="Histogram for Total Steps in Day",
xlab="Steps",
border="blue",
col="green",
ylim=c(0,30),
las=1,
breaks=5)
days_total_steps <- summarize(group_by(activityDF, date),
steps = sum(steps, na.rm = TRUE),
mean_steps = mean(steps, na.rm = TRUE))
days_total_steps
days_total_steps <- summarize(group_by(activityDF, date),
sum_steps = sum(steps, na.rm = TRUE),
mean_steps = mean(steps, na.rm = TRUE))
hist(days_total_steps$sum_steps,
main="Histogram for Total Steps in Day",
xlab="Steps",
border="blue",
col="green",
ylim=c(0,30),
las=1,
breaks=5)
days_total_steps
?colMeans
total_mean <- colMeans(days_total_steps$sum_steps, na.rm = TRUE)
?mean
total_mean <- mean(days_total_steps$sum_steps, na.rm = TRUE)
?median
total_median <- median(days_total_steps$sum_steps, na.rm = TRUE)
total_median
total_mean
hist(days_total_steps$sum_steps,
main="Histogram for Total Steps in Day",
xlab="Steps",
border="blue",
col="green",
ylim=c(0,30),
las=1,
breaks=5)
head(activityDF)
interval_total_steps <- summarize(group_by(activityDF, interval),
sum_steps = sum(steps, na.rm = TRUE),
mean_steps = mean(steps, na.rm = TRUE))
interval_total_steps
?plot
plot(interval_total_steps$interval, interval_total_steps$mean_steps, type="l")
?which.min
which.max(interval_total_steps$mean_steps)
interval_total_steps$interval[which.max(interval_total_steps$mean_steps)]
head(activityDF)
sum(is.na(activityDF$steps))
sum(is.na(activityDF$date))
sum(is.na(activityDF$interval))
imputedDF <- activityDF
interval_total_steps[,$interval = "0"]
interval_total_steps[,interval = "0"]
interval_total_steps[,interval_total_steps$interval = "0"]
interval_total_steps[,interval_total_steps$interval == "0"]
interval_total_steps[interval_total_steps$interval == "0"]
interval_total_steps[which(interval_total_steps$interval == "0"), ]
interval_total_steps[which(interval_total_steps$interval == "0"), ]$mean_steps
for (i in 1:17568) {
if (is.na(imputedDF$steps[i])) {
imputedDF$steps[i] <- interval_total_steps[which(interval_total_steps$interval == imputedDF$interval[i]), ]$mean_steps
}
}
str(imputedDF)
summary(imputedDF)
summary(activityDF)
x <- 0
for (i in 1:17568) {
if (is.na(imputedDF$steps[i])) {
x <- x + 1
}
}
x
imputedDF$steps[1]
head(activityDF)
head(imputedDF)
summary(imputedDF)
sum(is.na(activityDF$steps))
sum(is.na(imputedDF$steps))
imputed_days_total_steps <- summarize(group_by(imputedDF, date),
sum_steps = sum(steps, na.rm = TRUE),
mean_steps = mean(steps, na.rm = TRUE))
hist(imputed_days_total_steps$sum_steps)
hist(days_total_steps$sum_steps)
days_total_steps
interval_total_steps
?hist
hist(imputed_days_total_steps$sum_steps,
main="Histogram for Total Steps in Day (with imputed values)",
xlab="Steps",
border="blue",
col="green",
ylim=c(0,30),
las=1,
breaks=5)
hist(imputed_days_total_steps$sum_steps,
main="Histogram for Total Steps in Day (with imputed values)",
xlab="Steps",
border="blue",
col="green",
ylim=c(0,35),
las=1,
breaks=5)
hist(imputed_days_total_steps$sum_steps,
main="Histogram for Total Steps in Day (with imputed values)",
xlab="Steps",
border="blue",
col="green",
ylim=c(0,40),
las=1,
breaks=5)
hist(imputed_days_total_steps$sum_steps,
main="Histogram for Total Steps in Day (with imputed values)",
xlab="Steps",
border="blue",
col="green",
ylim=c(0,40),
las=1)
hist(days_total_steps$sum_steps,
main="Histogram for Total Steps in Day",
xlab="Steps",
border="blue",
col="green",
ylim=c(0,30),
las=1,
breaks=5)
hist(imputed_days_total_steps$sum_steps,
main="Histogram for Total Steps in Day (with imputed values)",
xlab="Steps",
border="blue",
col="green",
ylim=c(0,40),
las=1,
breaks=5)
hist(days_total_steps$sum_steps,
main="Histogram for Total Steps in Day",
xlab="Steps",
border="blue",
col="green",
ylim=c(0,30),
las=1,
breaks=5)
hist(imputed_days_total_steps$sum_steps,
main="Histogram for Total Steps in Day (with imputed values)",
xlab="Steps",
border="blue",
col="green",
ylim=c(0,40),
las=1,
breaks=5)
hist(days_total_steps$sum_steps,
main="Histogram for Total Steps in Day",
xlab="Steps",
border="blue",
col="green",
ylim=c(0,30),
las=1,
breaks=5)
hist(days_total_steps$sum_steps,
main="Histogram for Total Steps in Day",
xlab="Steps",
border="blue",
col="green",
ylim=c(0,40),
las=1,
breaks=5)
hist(imputed_days_total_steps$sum_steps,
main="Histogram for Total Steps in Day (with imputed values)",
xlab="Steps",
border="blue",
col="green",
ylim=c(0,40),
las=1,
breaks=5)
total_mean <- mean(days_total_steps$sum_steps, na.rm = TRUE)
total_median <- median(days_total_steps$sum_steps, na.rm = TRUE)
imputed_total_mean <- mean(imputed_days_total_steps$sum_steps, na.rm = TRUE)
imputed_total_median <- median(imputed_days_total_steps$sum_steps, na.rm = TRUE)
days_total_steps
